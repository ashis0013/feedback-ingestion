// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	time "time"

	models "github.com/ashis0013/feedback-ingestion/models"
	mock "github.com/stretchr/testify/mock"
)

// IngestionModule is an autogenerated mock type for the IngestionModule type
type IngestionModule struct {
	mock.Mock
}

// GetMetadata provides a mock function with given fields:
func (_m *IngestionModule) GetMetadata() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSleepDuration provides a mock function with given fields:
func (_m *IngestionModule) GetSleepDuration() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetSourceName provides a mock function with given fields:
func (_m *IngestionModule) GetSourceName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PullData provides a mock function with given fields:
func (_m *IngestionModule) PullData() []*models.Feedback {
	ret := _m.Called()

	var r0 []*models.Feedback
	if rf, ok := ret.Get(0).(func() []*models.Feedback); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Feedback)
		}
	}

	return r0
}

// SetSourceId provides a mock function with given fields: id
func (_m *IngestionModule) SetSourceId(id string) {
	_m.Called(id)
}

type mockConstructorTestingTNewIngestionModule interface {
	mock.TestingT
	Cleanup(func())
}

// NewIngestionModule creates a new instance of IngestionModule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIngestionModule(t mockConstructorTestingTNewIngestionModule) *IngestionModule {
	mock := &IngestionModule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
